[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pilotproject-frisperwhisper"
version = "0.1.0"
description = "TTS Language Age Dataset Processing and Whisper Fine-tuning"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Hanno MÃ¼ller", email = "hanno.mueller@hpi.de"},
]
keywords = ["whisper", "speech", "tts", "fine-tuning", "language", "age"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
]

dependencies = [
    # Core ML/AI libraries
    "torch",
    "transformers",
    "datasets",
    "accelerate",
    "evaluate",
    # Audio processing
    "librosa",
    "soundfile",
    "sounddevice",
    "torchcodec",
    # Data processing
    "numpy",
    "pandas",
    "chardet",
    # Development tools
    "jupyter",
    "ipykernel",
    # Utilities
    "tqdm",
    "rich",
    "click",
    "jiwer>=4.0.0",
    "tensorboard>=2.20.0",
    "num2words>=0.5.14",
    "matplotlib>=3.10.6",
    "seaborn>=0.13.2",
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-cov",
    "black",
    "isort",
    "flake8",
    "mypy",
]

gpu = [
    "torch[cuda]",
    "accelerate[cuda]",
]

metrics = [
    "jiwer",  # For WER computation
    "tensorboard",
    "wandb",
]

all = [
    "pilotproject-frisperwhisper[dev,gpu,metrics]"
]

[project.urls]
Homepage = "https://github.com/hanno-mueller-HPI/pilotproject-frisperwhisper"
Repository = "https://github.com/hanno-mueller-HPI/pilotproject-frisperwhisper"
Issues = "https://github.com/hanno-mueller-HPI/pilotproject-frisperwhisper/issues"

[project.scripts]
textgrids2dataset = "scripts.TextGrids2Dataset:main"
textgrids2dataset-debug = "scripts.TextGrids2DatasetDebug:main"
finetune-whisper-gpu = "scripts.finetune_whisper_gpu:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["scripts*"]

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.csv", "*.json"]

# Black formatting
[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# mypy type checking
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=scripts",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests as requiring GPU",
]

# Coverage configuration
[tool.coverage.run]
source = ["scripts"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
